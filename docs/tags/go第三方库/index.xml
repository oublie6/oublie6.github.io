<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go第三方库 - Tag - Oublie的Hugo博客</title>
        <link>https://oublie6.github.io/tags/go%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</link>
        <description>go第三方库 - Tag - Oublie的Hugo博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>313166062@qq.com (oublie)</managingEditor>
            <webMaster>313166062@qq.com (oublie)</webMaster><lastBuildDate>Sat, 28 Jan 2023 17:18:14 &#43;0800</lastBuildDate><atom:link href="https://oublie6.github.io/tags/go%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/" rel="self" type="application/rss+xml" /><item>
    <title>go第三方库-Ants</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/ants/</link>
    <pubDate>Sat, 28 Jan 2023 17:18:14 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/ants/</guid>
    <description><![CDATA[godoc github官网 github中文文档 ants是一个开源的go协程池(goruntine池)。使用很方便。 简单使用 使用ants默认的协程池 1]]></description>
</item>
<item>
    <title>go第三方库-Modd</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/modd/</link>
    <pubDate>Tue, 10 Jan 2023 11:01:07 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/modd/</guid>
    <description><![CDATA[godoc github 官方文档 Modd 是一种开发人员工具，可触发命令并管理守护进程以响应文件系统更改。 安装 1 go install github.com/cortesi/modd/cmd/modd@latest 使用 go项目热重载主要使用文件监视模式，即文件修改]]></description>
</item>
<item>
    <title>go第三方库-Sql2pb</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/sql2pb/</link>
    <pubDate>Thu, 05 Jan 2023 16:25:50 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/sql2pb/</guid>
    <description><![CDATA[godoc github官网 该库是Mikaelemmmm大佬写的通过sql直接生成pb的go程序 安装 1 go get -u github.com/Mikaelemmmm/sql2pb@latest 使用 1 sql2pb -go_package ./pb -host localhost -package pb -password root -port 3306 -schema usercenter -service_name usersrv -user root]]></description>
</item>
<item>
    <title>go第三方库-Sqlx</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/sqlx/</link>
    <pubDate>Wed, 04 Jan 2023 16:42:29 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/sqlx/</guid>
    <description><![CDATA[godoc godoc 官方文档]]></description>
</item>
<item>
    <title>go第三方库-Redis</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/redis/</link>
    <pubDate>Wed, 04 Jan 2023 15:22:28 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/redis/</guid>
    <description><![CDATA[godoc godoc 官方文档 新建客户端 1 2 3 4 5 6 rdb := redis.NewClient(&amp;redis.Options{ Addr: &#34;:6379&#34;, }) rdb.AddHook(redisHook{}) rdb.Ping() 执行命令 1 2 3 4 5 6 7 8 9 10 11 12 13 //process方法 Get := func(rdb *redis.Client, key string) *redis.StringCmd { cmd := redis.NewStringCmd(&#34;get&#34;, key) rdb.Process(cmd) return cmd } v,]]></description>
</item>
<item>
    <title>go第三方库-Websocket</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/websocket/</link>
    <pubDate>Wed, 04 Jan 2023 14:54:14 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/websocket/</guid>
    <description><![CDATA[godoc gorilla godoc 官方文档 nhooyr github官网 nhooyr godoc 官方文档 gorilla 该库已经不被维护 升级http协议 1 2 3 4 5 6 7 8 9 10 11 12 13 var upgrader = websocket.Upgrader{ ReadBufferSize: 1024, WriteBufferSize: 1024, } func handler(w http.ResponseWriter, r *http.Request) { conn, err :=]]></description>
</item>
<item>
    <title>go第三方库-Casbin</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/casbin/</link>
    <pubDate>Sun, 01 Jan 2023 17:24:24 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/casbin/</guid>
    <description><![CDATA[godoc casbin官网 基础知识 Casbin 是一个强大和高效的开放源码访问控制库，它支持各种 访问控制模型 以强制全面执行授权。 开始使用 新建一个Casbin enforcer C]]></description>
</item>
<item>
    <title>go第三方库-Base64Captcha</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/base64captcha/</link>
    <pubDate>Wed, 21 Dec 2022 22:01:57 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/base64captcha/</guid>
    <description><![CDATA[godoc 作者 EricZhou 博客 github官网 被引用的captcha库github官网 这个包使用base64编码生成的Captcha发送给客户端，之后获取客户]]></description>
</item>
<item>
    <title>go第三方库-Jwt</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/jwt/</link>
    <pubDate>Wed, 21 Dec 2022 18:26:28 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/jwt/</guid>
    <description><![CDATA[godoc godoc官网 生成jwt 声明claim结构体 1 2 3 4 5 6 type Claims struct { ID uint `json:&#34;id&#34;` Username string `json:&#34;username&#34;` Authority int `json:&#34;authority&#34;` jwt.StandardClaims } 使用结构体变量生成tokenClaim过渡对象 1 tokenClaims :=]]></description>
</item>
<item>
    <title>go第三方库-Mail</title>
    <link>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/mail/</link>
    <pubDate>Wed, 21 Dec 2022 18:04:42 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/golang/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/mail/</guid>
    <description><![CDATA[godoc godoc 官网 gomail的改进版 应用内发送邮件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 m := mail.NewMessage() m.SetHeader(&#34;From&#34;, &#34;alex@example.com&#34;) m.SetHeader(&#34;To&#34;, &#34;bob@example.com&#34;, &#34;cora@example.com&#34;) m.SetAddressHeader(&#34;Cc&#34;, &#34;dan@example.com&#34;, &#34;Dan&#34;) m.SetHeader(&#34;Subject&#34;, &#34;Hello!&#34;) m.SetBody(&#34;text/html&#34;, &#34;Hello &lt;b&gt;Bob&lt;/b&gt; and &lt;i&gt;Cora&lt;/i&gt;!&#34;) m.Attach(&#34;/home/Alex/lolcat.jpg&#34;) d := mail.NewDialer(&#34;smtp.example.com&#34;, 587, &#34;user&#34;, &#34;123456&#34;) d.StartTLSPolicy = mail.MandatoryStartTLS // Send the email to]]></description>
</item>
</channel>
</rss>
