<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>数据结构与算法 - Category - Oublie的Hugo博客</title>
        <link>https://oublie6.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
        <description>数据结构与算法 - Category - Oublie的Hugo博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>313166062@qq.com (oublie)</managingEditor>
            <webMaster>313166062@qq.com (oublie)</webMaster><lastBuildDate>Thu, 02 Feb 2023 17:18:14 &#43;0800</lastBuildDate><atom:link href="https://oublie6.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml" /><item>
    <title>数据结构与算法-刷题-K个一组反转链表</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
    <pubDate>Thu, 02 Feb 2023 17:18:14 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
    <description><![CDATA[leetcode 25 K 个一组翻转链表 给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。 学会东哥反转链表技巧后结合go语言特有的可以返回多个值]]></description>
</item>
<item>
    <title>数据结构与算法-刷题-数位DP</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/%E6%95%B0%E4%BD%8Ddp/</link>
    <pubDate>Thu, 02 Feb 2023 00:17:50 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/%E6%95%B0%E4%BD%8Ddp/</guid>
    <description><![CDATA[CSDN unique_pursuit 给定一个闭区间[l,r]，让你求这个区间中满足某种条件的数的总数 求[0,r]满足条件的数的总数，从最高位逐位枚举，对于第n位（十进制或二]]></description>
</item>
<item>
    <title>数据结构与算法-刷题-序列中只有一个数字出现k次</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/%E5%BA%8F%E5%88%97%E4%B8%AD%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0k%E6%AC%A1/</link>
    <pubDate>Sat, 28 Jan 2023 12:09:31 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%88%B7%E9%A2%98/%E5%BA%8F%E5%88%97%E4%B8%AD%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0k%E6%AC%A1/</guid>
    <description><![CDATA[除了一个数字出现k次外，其他数字出现m次，m不可整除k 位运算，记录每个位出现1的次数，当次数除以m不能除尽时，对于目标数字在该位上为1]]></description>
</item>
<item>
    <title>数据结构与算法-BF,SPFA和Floyd算法</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/bfspfa%E5%92%8Cfloyd%E7%AE%97%E6%B3%95/</link>
    <pubDate>Mon, 02 Jan 2023 12:24:50 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/bfspfa%E5%92%8Cfloyd%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[BF松弛算法 单源最短路径 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 var graph [][]int var minPath []int var preNode []int var l func]]></description>
</item>
<item>
    <title>数据结构与算法-KMP</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/kmp/</link>
    <pubDate>Fri, 30 Dec 2022 17:37:21 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/kmp/</guid>
    <description><![CDATA[getNextVal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var next []int func getNext(p []byte) { i, j, l := 1, 0, len(p) next = make([]int, l) next[0] = 0 for i &lt; l { if j == 0 || p[i] == p[j] { next[i] = j i++ j++ } else { j = next[j] } } } KMP 1 2 3]]></description>
</item>
<item>
    <title>数据结构与算法-labuladong-第三章</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/labuladong/%E7%AC%AC%E4%B8%89%E7%AB%A0/</link>
    <pubDate>Fri, 30 Dec 2022 16:19:06 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/labuladong/%E7%AC%AC%E4%B8%89%E7%AB%A0/</guid>
    <description><![CDATA[本系列笔记为作者在跟随labuladong的算法小抄学习的时候结合golang做的笔记。感谢东哥。 随机算法 洗牌算法 随机打乱一个数组 1 2 3 4 l:=len(s)]]></description>
</item>
<item>
    <title>数据结构与算法-labuladong-第一章</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/labuladong/%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
    <pubDate>Fri, 30 Dec 2022 11:05:35 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/labuladong/%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
    <description><![CDATA[本系列笔记为作者在跟随labuladong的算法小抄学习的时候结合golang做的笔记。感谢东哥。 前缀和数组 频繁查询某个区间的累加和 1 2 3 4]]></description>
</item>
<item>
    <title>数据结构与算法-labuladong-第零章</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/labuladong/%E7%AC%AC%E9%9B%B6%E7%AB%A0/</link>
    <pubDate>Thu, 29 Dec 2022 19:11:57 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/labuladong/%E7%AC%AC%E9%9B%B6%E7%AB%A0/</guid>
    <description><![CDATA[本系列笔记为作者在跟随labuladong的算法小抄学习的时候结合golang做的笔记。感谢东哥。 双指针技巧 秒杀链表和数组题目，快慢指针，左]]></description>
</item>
<item>
    <title>数据结构与算法-个人总结</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link>
    <pubDate>Wed, 28 Dec 2022 11:49:51 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[使用golang做题与使用其他语言做题有一些不同，golang原生的语法中的slice和map支持很多数据结构的简单构造如队列或栈，但是go]]></description>
</item>
<item>
    <title>数据结构与算法-雪花算法和uuid</title>
    <link>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E5%92%8Cuuid/</link>
    <pubDate>Mon, 26 Dec 2022 10:22:48 &#43;0800</pubDate>
    <author>oublie</author>
    <guid>https://oublie6.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E5%92%8Cuuid/</guid>
    <description><![CDATA[CSDN YmaxU UUID 形式为8-4-4-4-12的32个16位字符 本地生成，没有网络消耗，入数据库的性能较差 雪花算法 Twitter提出 雪花算法为什么不用自增]]></description>
</item>
</channel>
</rss>
